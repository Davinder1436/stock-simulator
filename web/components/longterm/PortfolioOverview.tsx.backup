'use client';

import React from 'react';
import { useLongTermSimulation } from '@/context/LongTermSimulationContext';
import { TrendingUp, TrendingDown, DollarSign, Target, Award } from 'lucide-react';

export const PortfolioOverview: React.FC = () => {
  const { currentMonthData, state } = useLongTermSimulation();

  if (!currentMonthData || !currentMonthData.userFinancials) return null;

  const { userFinancials, marketData } = currentMonthData;
  const isPositive = (userFinancials.returns || 0) >= 0;

  // Calculate allocation percentages
  const totalPortfolio = Object.values(userFinancials.portfolioBreakdown || {}).reduce(
    (sum, val) => sum + val,
    0
  );

  const allocations = Object.entries(userFinancials.portfolioBreakdown || {}).map(
    ([key, value]) => ({
      name: key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1'),
      value,
      percentage: totalPortfolio > 0 ? (value / totalPortfolio) * 100 : 0,
      color: getColorForAsset(key),
    })
  );

  const netWorth = userFinancials.totalNetWorth || 
    ((userFinancials.currentValue || 0) + (userFinancials.cashAvailable || 0));

  return (
    <div className="space-y-4">
      {/* Net Worth Card */}
      <div className="bg-gradient-to-br from-indigo-600 to-purple-700 rounded-xl p-6 text-white shadow-lg">
        <div className="flex items-center justify-between mb-2">
          <span className="text-indigo-100 text-sm font-medium">Total Net Worth</span>
          <Award className="w-5 h-5 text-indigo-200" />
        </div>
        <div className="text-4xl font-bold mb-1">
          ₹{(netWorth / 100000).toFixed(2)}L
        </div>
        <div className="text-indigo-100 text-sm">
          Month {state.currentMonth} of {state.chapterData?.chapterInfo.totalMonths}
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-2 gap-4">
        {/* Total Invested */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600 dark:text-gray-400 text-xs font-medium">
              Total Invested
            </span>
            <DollarSign className="w-4 h-4 text-blue-500" />
          </div>
          <div className="text-xl font-bold text-gray-900 dark:text-white">
            ₹{((userFinancials.totalInvested || 0) / 100000).toFixed(2)}L
          </div>
        </div>

        {/* Current Value */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600 dark:text-gray-400 text-xs font-medium">
              Current Value
            </span>
            <Target className="w-4 h-4 text-green-500" />
          </div>
          <div className="text-xl font-bold text-gray-900 dark:text-white">
            ₹{((userFinancials.currentValue || 0) / 100000).toFixed(2)}L
          </div>
        </div>

        {/* Returns */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center justify-between mb-2">
            <span className="text-gray-600 dark:text-gray-400 text-xs font-medium">
              Absolute Returns
            </span>
            {isPositive ? (
              <TrendingUp className="w-4 h-4 text-green-500" />
            ) : (
              <TrendingDown className="w-4 h-4 text-red-500" />
            )}
          </div>
          <div
            className={`text-xl font-bold ${
              isPositive ? 'text-green-600' : 'text-red-600'
            }`}
          >
            {isPositive ? '+' : ''}₹{((userFinancials.returns || 0) / 100000).toFixed(2)}L
          </div>
          <div
            className={`text-sm font-medium ${
              isPositive ? 'text-green-600' : 'text-red-600'
            }`}
          >
            {isPositive ? '+' : ''}{(userFinancials.returnsPercentage || 0).toFixed(2)}%
          </div>
        </div>

        {/* XIRR */}
        {userFinancials.xirr && (
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
            <div className="flex items-center justify-between mb-2">
              <span className="text-gray-600 dark:text-gray-400 text-xs font-medium">
                XIRR (Annualized)
              </span>
              <TrendingUp className="w-4 h-4 text-purple-500" />
            </div>
            <div className="text-xl font-bold text-purple-600">
              {userFinancials.xirr.toFixed(2)}%
            </div>
            <div className="text-xs text-gray-500 dark:text-gray-400">per year</div>
          </div>
        )}
      </div>

      {/* Allocation Chart */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-5 border border-gray-200 dark:border-gray-700 shadow-sm">
        <h3 className="text-sm font-semibold text-gray-900 dark:text-white mb-4">
          Portfolio Allocation
        </h3>

        {/* Simple Bar Chart */}
        <div className="space-y-3">
          {allocations
            .filter(a => a.percentage > 0)
            .sort((a, b) => b.percentage - a.percentage)
            .map((allocation, idx) => (
              <div key={idx}>
                <div className="flex items-center justify-between mb-1">
                  <span className="text-xs font-medium text-gray-700 dark:text-gray-300">
                    {allocation.name}
                  </span>
                  <span className="text-xs font-bold text-gray-900 dark:text-white">
                    {allocation.percentage.toFixed(1)}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className="h-2 rounded-full transition-all duration-500"
                    style={{
                      width: `${allocation.percentage}%`,
                      backgroundColor: allocation.color,
                    }}
                  />
                </div>
                <div className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                  ₹{(allocation.value / 100000).toFixed(2)}L
                </div>
              </div>
            ))}
        </div>
      </div>

      {/* Market Sentiment Indicator */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
        <div className="flex items-center justify-between">
          <div>
            <div className="text-xs font-medium text-gray-600 dark:text-gray-400 mb-1">
              Market Sentiment
            </div>
            <div className="flex items-center gap-2">
              <div
                className={`px-3 py-1 rounded-full text-xs font-semibold ${getSentimentStyle(
                  marketData.sentiment
                )}`}
              >
                {marketData.sentiment.toUpperCase()}
              </div>
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Nifty: {marketData.nifty50Index.toLocaleString()}
              </span>
            </div>
          </div>
          <div
            className={`text-2xl font-bold ${
              marketData.nifty50Change >= 0 ? 'text-green-600' : 'text-red-600'
            }`}
          >
            {marketData.nifty50Change >= 0 ? '+' : ''}
            {marketData.nifty50Change.toFixed(1)}%
          </div>
        </div>
      </div>

      {/* Monthly Cash Flow */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
        <h3 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">
          Monthly Cash Flow
        </h3>
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-xs text-gray-600 dark:text-gray-400">Income</span>
            <span className="text-sm font-semibold text-green-600">
              +₹{(userFinancials.monthlyIncome || 0).toLocaleString()}
            </span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-xs text-gray-600 dark:text-gray-400">Expenses</span>
            <span className="text-sm font-semibold text-red-600">
              -₹{(userFinancials.monthlyExpenses || 0).toLocaleString()}
            </span>
          </div>
          <div className="border-t border-gray-200 dark:border-gray-700 pt-2">
            <div className="flex justify-between items-center">
              <span className="text-xs font-medium text-gray-900 dark:text-white">
                Available to Invest
              </span>
              <span className="text-sm font-bold text-blue-600">
                ₹{((userFinancials.monthlyIncome || 0) - (userFinancials.monthlyExpenses || 0)).toLocaleString()}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

function getColorForAsset(assetKey: string): string {
  const colors: { [key: string]: string } = {
    savings: '#3b82f6', // blue
    nifty50: '#8b5cf6', // purple
    fd: '#10b981', // green
    gold: '#f59e0b', // amber
    bonds: '#06b6d4', // cyan
    mutualFunds: '#ec4899', // pink
  };
  return colors[assetKey] || '#6b7280';
}

function getSentimentStyle(sentiment: string): string {
  switch (sentiment.toLowerCase()) {
    case 'positive':
    case 'bullish':
      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
    case 'negative':
    case 'bearish':
      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
  }
}
