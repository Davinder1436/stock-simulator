'use client';

import React, { useState } from 'react';
import { useLongTermSimulation } from '@/context/LongTermSimulationContext';
import { TrendingUp, DollarSign, Lock, Info, Plus, Minus } from 'lucide-react';

export const InvestmentPanel: React.FC = () => {
  const { state, currentMonthData, recordDecision } = useLongTermSimulation();
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [sipAmount, setSipAmount] = useState(10000);

  if (!state.chapterData || !currentMonthData || !currentMonthData.userFinancials) return null;

  const { availableInvestmentOptions } = state.chapterData;
  const { userFinancials } = currentMonthData;

  const availableCash = userFinancials.cashAvailable || 0;
  const monthlyAvailable =
    (userFinancials.monthlyIncome || 0) - (userFinancials.monthlyExpenses || 0);

  const handleInvestment = (optionId: string, amount: number) => {
    recordDecision(`investment-${currentMonthData.month}-${optionId}`, amount);
    // In a real implementation, this would update the portfolio
  };

  return (
    <div className="space-y-4">
      {/* Available Cash Display */}
      <div className="bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg p-5 text-white shadow-lg">
        <div className="text-sm font-medium text-blue-100 mb-1">Available Cash</div>
        <div className="text-3xl font-bold mb-2">
          ₹{(availableCash / 100000).toFixed(2)}L
        </div>
        <div className="text-sm text-blue-100">
          Monthly Available: ₹{monthlyAvailable.toLocaleString()}
        </div>
      </div>

      {/* Investment Options Tabs */}
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm overflow-hidden">
        <div className="border-b border-gray-200 dark:border-gray-700">
          <div className="flex overflow-x-auto">
            {availableInvestmentOptions.map(option => (
              <button
                key={option.id}
                onClick={() => setSelectedOption(option.id)}
                className={`px-4 py-3 text-sm font-medium whitespace-nowrap border-b-2 transition-colors ${
                  selectedOption === option.id
                    ? 'border-blue-600 text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
                    : 'border-transparent text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700/50'
                }`}
              >
                {option.name}
              </button>
            ))}
          </div>
        </div>

        {/* Selected Option Details */}
        {selectedOption && (
          <div className="p-5">
            {availableInvestmentOptions
              .filter(opt => opt.id === selectedOption)
              .map(option => (
                <div key={option.id} className="space-y-4">
                  {/* Option Header */}
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-bold text-gray-900 dark:text-white">
                        {option.name}
                      </h3>
                      <span
                        className={`px-2 py-1 rounded text-xs font-semibold ${getRiskLevelStyle(
                          option.riskLevel
                        )}`}
                      >
                        {option.riskLevel.toUpperCase()} RISK
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {option.description}
                    </p>
                  </div>

                  {/* Key Metrics Grid */}
                  <div className="grid grid-cols-2 gap-3">
                    <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3">
                      <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                        Expected Return
                      </div>
                      <div className="text-lg font-bold text-green-600">
                        {option.historicalReturn}
                      </div>
                    </div>
                    <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3">
                      <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                        Min Investment
                      </div>
                      <div className="text-lg font-bold text-gray-900 dark:text-white">
                        ₹{option.minInvestment.toLocaleString()}
                      </div>
                    </div>
                    <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3">
                      <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                        Liquidity
                      </div>
                      <div className="text-sm font-semibold text-gray-900 dark:text-white capitalize">
                        {option.liquidity}
                      </div>
                    </div>
                    <div className="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3">
                      <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                        Lock-in Period
                      </div>
                      <div className="text-sm font-semibold text-gray-900 dark:text-white">
                        {option.lockInPeriod > 0
                          ? `${option.lockInPeriod} months`
                          : 'None'}
                      </div>
                    </div>
                  </div>

                  {/* Tax Implications */}
                  <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3">
                    <div className="flex items-start gap-2">
                      <Info className="w-4 h-4 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" />
                      <div>
                        <div className="text-xs font-semibold text-amber-900 dark:text-amber-200 mb-1">
                          Tax Implications
                        </div>
                        {Object.entries(option.taxImplication).map(([key, value]) => (
                          <div
                            key={key}
                            className="text-xs text-amber-800 dark:text-amber-300"
                          >
                            <span className="font-medium">{key.toUpperCase()}:</span>{' '}
                            {value}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* SIP Configuration (for equity options) */}
                  {option.type === 'equity' && (
                    <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                      <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">
                        Configure SIP
                      </h4>

                      <div className="space-y-3">
                        {/* SIP Amount Selector */}
                        <div>
                          <label className="text-xs text-gray-600 dark:text-gray-400 block mb-2">
                            Monthly SIP Amount
                          </label>
                          <div className="flex items-center gap-3">
                            <button
                              onClick={() => setSipAmount(Math.max(500, sipAmount - 1000))}
                              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                            >
                              <Minus className="w-4 h-4 text-gray-700 dark:text-gray-300" />
                            </button>
                            <div className="flex-1 text-center">
                              <input
                                type="number"
                                value={sipAmount}
                                onChange={e =>
                                  setSipAmount(Math.max(500, parseInt(e.target.value) || 0))
                                }
                                className="w-full text-center text-2xl font-bold bg-transparent border-b-2 border-blue-600 focus:outline-none text-gray-900 dark:text-white"
                              />
                              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                {((sipAmount / monthlyAvailable) * 100).toFixed(1)}% of
                                monthly income
                              </div>
                            </div>
                            <button
                              onClick={() =>
                                setSipAmount(
                                  Math.min(monthlyAvailable, sipAmount + 1000)
                                )
                              }
                              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                            >
                              <Plus className="w-4 h-4 text-gray-700 dark:text-gray-300" />
                            </button>
                          </div>
                        </div>

                        {/* Quick Preset Buttons */}
                        <div className="flex gap-2">
                          {[5000, 10000, 15000, 20000].map(amount => (
                            <button
                              key={amount}
                              onClick={() => setSipAmount(amount)}
                              className={`flex-1 px-3 py-2 rounded-lg text-xs font-medium transition-colors ${
                                sipAmount === amount
                                  ? 'bg-blue-600 text-white'
                                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                              }`}
                            >
                              ₹{(amount / 1000).toFixed(0)}k
                            </button>
                          ))}
                        </div>

                        {/* Start/Update SIP Button */}
                        <button
                          onClick={() => handleInvestment(option.id, sipAmount)}
                          className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white font-semibold py-3 rounded-lg transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2"
                        >
                          <TrendingUp className="w-5 h-5" />
                          {state.userDecisions[`sip-${option.id}`]
                            ? 'Update SIP'
                            : 'Start SIP'}
                        </button>
                      </div>
                    </div>
                  )}

                  {/* One-time Investment (for non-equity) */}
                  {option.type !== 'equity' && (
                    <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                      <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-3">
                        One-time Investment
                      </h4>

                      <div className="space-y-3">
                        <input
                          type="number"
                          placeholder="Enter amount"
                          className="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />

                        <button
                          onClick={() => handleInvestment(option.id, 0)}
                          className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold py-3 rounded-lg transition-all shadow-md hover:shadow-lg flex items-center justify-center gap-2"
                        >
                          <DollarSign className="w-5 h-5" />
                          Invest Now
                        </button>
                      </div>
                    </div>
                  )}

                  {/* Current Holdings */}
                  {userFinancials.portfolioBreakdown && userFinancials.portfolioBreakdown[option.id] > 0 && (
                    <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-xs text-green-700 dark:text-green-300 font-medium">
                            Your Holdings
                          </div>
                          <div className="text-lg font-bold text-green-900 dark:text-green-100">
                            ₹
                            {(
                              (userFinancials.portfolioBreakdown[option.id] || 0) / 100000
                            ).toFixed(2)}
                            L
                          </div>
                        </div>
                        <Lock className="w-8 h-8 text-green-600 dark:text-green-400 opacity-50" />
                      </div>
                    </div>
                  )}
                </div>
              ))}
          </div>
        )}

        {/* Default State */}
        {!selectedOption && (
          <div className="p-8 text-center text-gray-500 dark:text-gray-400">
            <DollarSign className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p className="text-sm">Select an investment option to view details</p>
          </div>
        )}
      </div>
    </div>
  );
};

function getRiskLevelStyle(riskLevel: string): string {
  switch (riskLevel.toLowerCase()) {
    case 'none':
    case 'very-low':
      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
    case 'low':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
    case 'moderate':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
    case 'high':
      return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';
    case 'very-high':
      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
  }
}
